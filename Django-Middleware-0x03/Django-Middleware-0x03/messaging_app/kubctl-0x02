#!/bin/bash

# kubctl-0x02 - Blue-Green Deployment Management Script
# ALX Backend Python Project - messaging_app
# This script manages Blue-Green deployments with zero-downtime switching

set -e  # Exit on any error

echo "🔄 Blue-Green Deployment Management Script"
echo "=========================================="

# Function to print colored output
print_success() {
    echo -e "\033[32m✅ $1\033[0m"
}

print_error() {
    echo -e "\033[31m❌ $1\033[0m"
}

print_info() {
    echo -e "\033[34mℹ️  $1\033[0m"
}

print_warning() {
    echo -e "\033[33m⚠️  $1\033[0m"
}

print_header() {
    echo ""
    echo "🔧 $1"
    echo "$(printf '=%.0s' {1..60})"
}

# Variables
BLUE_DEPLOYMENT="django-messaging-blue"
GREEN_DEPLOYMENT="django-messaging-green"
MAIN_SERVICE="django-messaging-service"
TIMEOUT=300  # 5 minutes timeout for deployments

# Function to check if deployment exists
deployment_exists() {
    kubectl get deployment "$1" >/dev/null 2>&1
}

# Function to wait for deployment to be ready
wait_for_deployment() {
    local deployment_name=$1
    local timeout=${2:-300}
    
    print_info "Waiting for deployment $deployment_name to be ready..."
    if kubectl rollout status deployment/"$deployment_name" --timeout="${timeout}s"; then
        print_success "Deployment $deployment_name is ready"
        return 0
    else
        print_error "Deployment $deployment_name failed to become ready"
        return 1
    fi
}

# Function to check pod health
check_pod_health() {
    local deployment_name=$1
    local version=$2
    
    print_info "Checking health of $version pods..."
    
    # Get pod names for the deployment
    local pods=$(kubectl get pods -l app=django-messaging-app,version="$version" -o jsonpath='{.items[*].metadata.name}')
    
    if [ -z "$pods" ]; then
        print_error "No pods found for $version deployment"
        return 1
    fi
    
    local healthy_pods=0
    local total_pods=0
    
    for pod in $pods; do
        total_pods=$((total_pods + 1))
        print_info "Checking pod: $pod"
        
        # Check pod status
        local pod_status=$(kubectl get pod "$pod" -o jsonpath='{.status.phase}')
        if [ "$pod_status" = "Running" ]; then
            # Check if pod is ready
            local ready=$(kubectl get pod "$pod" -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
            if [ "$ready" = "True" ]; then
                healthy_pods=$((healthy_pods + 1))
                print_success "Pod $pod is healthy"
            else
                print_warning "Pod $pod is running but not ready"
            fi
        else
            print_warning "Pod $pod status: $pod_status"
        fi
    done
    
    print_info "Healthy pods: $healthy_pods/$total_pods"
    
    if [ "$healthy_pods" -eq "$total_pods" ] && [ "$total_pods" -gt 0 ]; then
        return 0
    else
        return 1
    fi
}

# Function to check logs for errors
check_deployment_logs() {
    local deployment_name=$1
    local version=$2
    local lines=${3:-50}
    
    print_info "Checking logs for $version deployment (last $lines lines)..."
    
    # Get pod names
    local pods=$(kubectl get pods -l app=django-messaging-app,version="$version" -o jsonpath='{.items[*].metadata.name}')
    
    if [ -z "$pods" ]; then
        print_warning "No pods found for $version deployment"
        return 1
    fi
    
    local error_found=false
    
    for pod in $pods; do
        print_info "Checking logs for pod: $pod"
        
        # Check for common error patterns
        local log_output=$(kubectl logs "$pod" --tail="$lines" 2>/dev/null || echo "")
        
        if echo "$log_output" | grep -i -E "(error|exception|failed|critical)" >/dev/null; then
            print_warning "Potential errors found in pod $pod:"
            echo "$log_output" | grep -i -E "(error|exception|failed|critical)" | head -5
            error_found=true
        else
            print_success "No obvious errors in pod $pod logs"
        fi
        
        # Show last few lines of logs
        echo "Last 5 log lines from $pod:"
        echo "$log_output" | tail -5
        echo "---"
    done
    
    if [ "$error_found" = true ]; then
        return 1
    else
        return 0
    fi
}

# Function to switch traffic
switch_traffic() {
    local target_version=$1
    
    print_info "Switching traffic to $target_version version..."
    
    # Update the main service selector
    kubectl patch service "$MAIN_SERVICE" -p '{"spec":{"selector":{"version":"'"$target_version"'"}}}'
    
    print_success "Traffic switched to $target_version version"
}

# Function to get current traffic target
get_current_traffic_target() {
    kubectl get service "$MAIN_SERVICE" -o jsonpath='{.spec.selector.version}' 2>/dev/null || echo "unknown"
}

# Check prerequisites
print_header "Checking Prerequisites"

if ! command -v kubectl >/dev/null 2>&1; then
    print_error "kubectl is not installed"
    exit 1
fi
print_success "kubectl is available"

if ! kubectl cluster-info >/dev/null 2>&1; then
    print_error "Cannot connect to Kubernetes cluster"
    exit 1
fi
print_success "Kubernetes cluster is accessible"

# Show current state
print_header "Current Deployment State"

current_target=$(get_current_traffic_target)
print_info "Current traffic target: $current_target"

if deployment_exists "$BLUE_DEPLOYMENT"; then
    print_info "Blue deployment exists"
    kubectl get deployment "$BLUE_DEPLOYMENT" -o wide
else
    print_warning "Blue deployment does not exist"
fi

if deployment_exists "$GREEN_DEPLOYMENT"; then
    print_info "Green deployment exists"
    kubectl get deployment "$GREEN_DEPLOYMENT" -o wide
else
    print_warning "Green deployment does not exist"
fi

# Main menu
print_header "Blue-Green Deployment Options"

echo "Choose an action:"
echo "1. Deploy Blue version (stable)"
echo "2. Deploy Green version (new)"
echo "3. Deploy both versions"
echo "4. Switch traffic to Blue"
echo "5. Switch traffic to Green"
echo "6. Check deployment health"
echo "7. View deployment logs"
echo "8. Cleanup deployments"
echo "9. Full Blue-Green cycle (deploy both + test + switch)"

read -p "Enter your choice (1-9): " choice

case $choice in
    1)
        print_header "Deploying Blue Version"
        print_info "Applying blue_deployment.yaml..."
        kubectl apply -f blue_deployment.yaml
        wait_for_deployment "$BLUE_DEPLOYMENT"
        check_pod_health "$BLUE_DEPLOYMENT" "blue"
        check_deployment_logs "$BLUE_DEPLOYMENT" "blue" 20
        ;;
        
    2)
        print_header "Deploying Green Version"
        print_info "Applying green_deployment.yaml..."
        kubectl apply -f green_deployment.yaml
        wait_for_deployment "$GREEN_DEPLOYMENT"
        check_pod_health "$GREEN_DEPLOYMENT" "green"
        check_deployment_logs "$GREEN_DEPLOYMENT" "green" 20
        ;;
        
    3)
        print_header "Deploying Both Versions"
        
        print_info "Applying blue_deployment.yaml..."
        kubectl apply -f blue_deployment.yaml
        
        print_info "Applying green_deployment.yaml..."
        kubectl apply -f green_deployment.yaml
        
        print_info "Applying kubeservice.yaml..."
        kubectl apply -f kubeservice.yaml
        
        wait_for_deployment "$BLUE_DEPLOYMENT"
        wait_for_deployment "$GREEN_DEPLOYMENT"
        
        check_pod_health "$BLUE_DEPLOYMENT" "blue"
        check_pod_health "$GREEN_DEPLOYMENT" "green"
        ;;
        
    4)
        print_header "Switching Traffic to Blue"
        switch_traffic "blue"
        print_info "Verifying traffic switch..."
        sleep 5
        new_target=$(get_current_traffic_target)
        print_success "Traffic is now routed to: $new_target"
        ;;
        
    5)
        print_header "Switching Traffic to Green"
        if ! deployment_exists "$GREEN_DEPLOYMENT"; then
            print_error "Green deployment does not exist. Deploy it first."
            exit 1
        fi
        
        if check_pod_health "$GREEN_DEPLOYMENT" "green"; then
            switch_traffic "green"
            print_info "Verifying traffic switch..."
            sleep 5
            new_target=$(get_current_traffic_target)
            print_success "Traffic is now routed to: $new_target"
        else
            print_error "Green deployment is not healthy. Cannot switch traffic."
            exit 1
        fi
        ;;
        
    6)
        print_header "Checking Deployment Health"
        
        if deployment_exists "$BLUE_DEPLOYMENT"; then
            check_pod_health "$BLUE_DEPLOYMENT" "blue"
        fi
        
        if deployment_exists "$GREEN_DEPLOYMENT"; then
            check_pod_health "$GREEN_DEPLOYMENT" "green"
        fi
        
        print_info "Service status:"
        kubectl get services -l app=django-messaging-app
        ;;
        
    7)
        print_header "Viewing Deployment Logs"
        
        echo "Choose version to view logs:"
        echo "1. Blue"
        echo "2. Green"
        echo "3. Both"
        
        read -p "Enter choice (1-3): " log_choice
        
        case $log_choice in
            1)
                if deployment_exists "$BLUE_DEPLOYMENT"; then
                    check_deployment_logs "$BLUE_DEPLOYMENT" "blue" 50
                else
                    print_error "Blue deployment does not exist"
                fi
                ;;
            2)
                if deployment_exists "$GREEN_DEPLOYMENT"; then
                    check_deployment_logs "$GREEN_DEPLOYMENT" "green" 50
                else
                    print_error "Green deployment does not exist"
                fi
                ;;
            3)
                if deployment_exists "$BLUE_DEPLOYMENT"; then
                    check_deployment_logs "$BLUE_DEPLOYMENT" "blue" 25
                fi
                if deployment_exists "$GREEN_DEPLOYMENT"; then
                    check_deployment_logs "$GREEN_DEPLOYMENT" "green" 25
                fi
                ;;
        esac
        ;;
        
    8)
        print_header "Cleanup Deployments"
        
        read -p "Are you sure you want to delete all deployments? (y/N): " confirm
        if [[ $confirm =~ ^[Yy]$ ]]; then
            kubectl delete -f blue_deployment.yaml --ignore-not-found=true
            kubectl delete -f green_deployment.yaml --ignore-not-found=true
            print_success "Deployments cleaned up"
        else
            print_info "Cleanup cancelled"
        fi
        ;;
        
    9)
        print_header "Full Blue-Green Deployment Cycle"
        
        # Deploy both versions
        print_info "Step 1: Deploying both versions..."
        kubectl apply -f blue_deployment.yaml
        kubectl apply -f green_deployment.yaml
        kubectl apply -f kubeservice.yaml
        
        # Wait for deployments
        wait_for_deployment "$BLUE_DEPLOYMENT"
        wait_for_deployment "$GREEN_DEPLOYMENT"
        
        # Check health
        print_info "Step 2: Health checks..."
        if ! check_pod_health "$BLUE_DEPLOYMENT" "blue"; then
            print_error "Blue deployment health check failed"
            exit 1
        fi
        
        if ! check_pod_health "$GREEN_DEPLOYMENT" "green"; then
            print_error "Green deployment health check failed"
            exit 1
        fi
        
        # Check logs
        print_info "Step 3: Log analysis..."
        check_deployment_logs "$BLUE_DEPLOYMENT" "blue" 20
        check_deployment_logs "$GREEN_DEPLOYMENT" "green" 20
        
        # Switch to green if healthy
        print_info "Step 4: Traffic switching..."
        print_warning "Current traffic target: $(get_current_traffic_target)"
        
        read -p "Switch traffic to Green version? (y/N): " switch_confirm
        if [[ $switch_confirm =~ ^[Yy]$ ]]; then
            switch_traffic "green"
            print_success "Traffic switched to Green version"
        else
            print_info "Traffic switch skipped"
        fi
        ;;
        
    *)
        print_error "Invalid choice"
        exit 1
        ;;
esac

print_header "Current Status Summary"

current_target=$(get_current_traffic_target)
print_info "Traffic target: $current_target"

kubectl get deployments -l app=django-messaging-app
echo ""
kubectl get services -l app=django-messaging-app
echo ""
kubectl get pods -l app=django-messaging-app -o wide

print_success "Blue-Green deployment operation completed!"