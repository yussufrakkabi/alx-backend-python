# Blue-Green Traffic Management Services
# ALX Backend Python Project - messaging_app
# Services for switching traffic between Blue and Green deployments

---
# Main Production Service (Traffic Router)
apiVersion: v1
kind: Service
metadata:
  name: django-messaging-service
  labels:
    app: django-messaging-app
    component: traffic-router
    role: production
spec:
  type: ClusterIP
  # This selector determines which version receives production traffic
  # Change 'version: blue' to 'version: green' to switch traffic
  selector:
    app: django-messaging-app
    version: blue  # <-- Change this to 'green' to switch traffic
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  sessionAffinity: None

---
# Blue Environment Service (Direct access to Blue)
apiVersion: v1
kind: Service
metadata:
  name: django-messaging-blue
  labels:
    app: django-messaging-app
    version: blue
    environment: production
spec:
  type: ClusterIP
  selector:
    app: django-messaging-app
    version: blue
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http

---
# Green Environment Service (Direct access to Green)
apiVersion: v1
kind: Service
metadata:
  name: django-messaging-green
  labels:
    app: django-messaging-app
    version: green
    environment: staging
spec:
  type: ClusterIP
  selector:
    app: django-messaging-app
    version: green
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http

---
# NodePort Service for External Testing (Blue)
apiVersion: v1
kind: Service
metadata:
  name: django-messaging-blue-external
  labels:
    app: django-messaging-app
    version: blue
    access: external
spec:
  type: NodePort
  selector:
    app: django-messaging-app
    version: blue
  ports:
  - port: 80
    targetPort: 8000
    nodePort: 30001
    protocol: TCP
    name: http

---
# NodePort Service for External Testing (Green)
apiVersion: v1
kind: Service
metadata:
  name: django-messaging-green-external
  labels:
    app: django-messaging-app
    version: green
    access: external
spec:
  type: NodePort
  selector:
    app: django-messaging-app
    version: green
  ports:
  - port: 80
    targetPort: 8000
    nodePort: 30002
    protocol: TCP
    name: http

---
# Canary Service (for gradual traffic shifting - optional advanced feature)
apiVersion: v1
kind: Service
metadata:
  name: django-messaging-canary
  labels:
    app: django-messaging-app
    component: canary
spec:
  type: ClusterIP
  # No selector - will be managed by endpoints for weighted routing
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http

---
# Endpoints for Canary deployment (manual traffic distribution)
apiVersion: v1
kind: Endpoints
metadata:
  name: django-messaging-canary
  labels:
    app: django-messaging-app
    component: canary
subsets:
- addresses: []  # Will be populated by script based on pod IPs
  ports:
  - port: 8000
    name: http